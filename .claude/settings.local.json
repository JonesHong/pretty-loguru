{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(rg:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(mv:*)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/environment_config.py)",
      "Bash(pip3 install:*)",
      "Bash(apt list:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 test_function_names.py)",
      "Bash(grep:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/quickstart_example.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/detailed_example_en.py)",
      "mcp__zen__planner",
      "mcp__zen__thinkdeep",
      "Bash(ls:*)",
      "mcp__zen__analyze",
      "Bash(git add:*)",
      "Bash(mkdir:*)",
      "mcp__zen__consensus",
      "mcp__zen__chat",
      "mcp__zen__codereview",
      "mcp__zen__debug",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/01_quickstart/comparison.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/01_quickstart/instant_beauty.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/01_quickstart/quick_setup.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/02_basic/multi_logger_management.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/02_basic/time_based_organization.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/02_basic/structured_logging.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/02_basic/target_specific_output.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python examples/03_advanced/configuration_management.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_advanced/configuration_management.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_advanced/framework_integration.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_advanced/performance_monitoring.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_advanced/log_rotation_retention.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/04_complex/microservices_logging.py 2 > /dev/null)",
      "Bash(cp:*)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/01_basics/simple_usage.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru timeout 5s python3 examples/04_fastapi/simple_api.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 -c \"try:\n    from pretty_loguru.integrations.fastapi import setup_fastapi_logging\n    print(''✓ pretty_loguru.integrations.fastapi 可用'')\nexcept ImportError as e:\n    print(f''✗ Import 錯誤: {e}'')\")",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 -c \"\nfrom pretty_loguru.integrations import fastapi\nprint(''FastAPI 模組內容:'')\nprint([name for name in dir(fastapi) if not name.startswith(''_'')])\n\")",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 -c \"\nfrom pretty_loguru.integrations import fastapi\nprint('FastAPI 模組內容:')\nprint([name for name in dir(fastapi) if not name.startswith('_')])\n\")",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/02_visual/rich_components.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_presets/preset_comparison.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 -c \"\nimport sys\nsys.path.append(''.'')\n\n# Get just the working method calls from rich_components.py\nfrom pretty_loguru import create_logger\n\nlogger = create_logger(''test'')\nprint(''✅ API methods available:'')\nprint(''  - logger.table(title, data)'')  # data = list of dicts\nprint(''  - logger.tree(title, tree_data)'')  # tree_data = nested dict\nprint(''  - logger.columns(title, items)'')  # items = list of strings\nprint(''  - logger.progress.track_list(items, description)'')\nprint('''')\nprint(''✅ Rich components working correctly!'')\n\")",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_presets/custom_presets.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_presets/rotation_examples.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/05_production/deployment_logging.py)",
      "Bash(sed:*)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru timeout 10s python3 live_rotation_demo.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru timeout 15s python3 custom_presets_enhanced.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru timeout 20s python3 custom_filename_demo.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_presets/custom_filename_demo.py)",
      "Bash(PYTHONPATH=/mnt/c/work/pretty-loguru python3 examples/03_presets/preset_compression_demo.py)",
      "mcp__zen__tracer",
      "Bash(PYTHONPATH=:*)",
      "Bash(timeout 30 python3 simple_cleaner_test.py)",
      "Bash(timeout 30 python3:*)",
      "Bash(timeout 15 python3 suggested_fixes.py)",
      "mcp__zen__listmodels",
      "Bash(node:*)",
      "Bash(npm --version)",
      "Bash(npm init:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(npm run build:*)",
      "mcp__zen__testgen",
      "Bash(git commit:*)",
      "Bash(apt:*)",
      "Bash(apt install:*)",
      "Bash(git tag:*)",
      "Bash(git push:*)",
      "Bash(diff:*)",
      "WebFetch(domain:joneshong.github.io)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(timeout:*)",
      "Bash(touch:*)"
    ],
    "deny": []
  },
  "xxx": {
    "theme": "Default",
    "selectedAuthType": "oauth-personal",
    "mcpServers": {
      "context7": {
        "command": "npx",
        "args": [
          "-y",
          "@upstash/context7-mcp"
        ]
      },
      "taskmaster-ai": {
        "command": "npx",
        "args": [
          "-y",
          "--package=task-master-ai",
          "task-master-ai"
        ],
        "env": {
          "ANTHROPIC_API_KEY": "sk-ant-",
          "OPENAI_API_KEY": "sk-proj-",
          "GOOGLE_API_KEY": "sk-proj-"
        }
      }
    }
  }
}